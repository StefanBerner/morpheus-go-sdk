package morpheusapi_test

import (
	"github.com/gomorpheus/morpheusapi"
    
	// "./morpheus/api/client"
	// "./morpheus/api/request"
	// "./morpheus/api/response"
	"fmt"
	"encoding/json"
	"testing"
)

func TestListKeyPairs(t *testing.T) {
	client := getTestClient()
	// client.Login()
	listKeyPairsRequest := &morpheusapi.Request{
		Method: "GET",
		Path: "/api/key-pairs",
	}
	resp, err := client.Execute(listKeyPairsRequest)
	assertResponse(t, resp, err)
}

func TestKeyPairs(t *testing.T) {
	client := getTestClient()
	// 1. Create a KeyPair
	// 2. Get KeyPair by ID
	// 3. List KeyPairs and search by name

	
	// client.Login()
	listKeyPairsRequest := &morpheusapi.Request{
		Method: "GET",
		Path: "/api/key-pairs",
	}
	resp, err := client.Execute(listKeyPairsRequest)
	assertResponse(t, resp, err)
}

// func TestGetKeyPair(t *testing.T) {
// 	client := getTestClient()
// 	// client.Login()
// 	getKeyPairRequest := &morpheusapi.Request{
// 		Method: "GET",
// 		Path: "/api/key-pairs",
// 	}
// 	resp, err := client.GetKeyPair(99, &morpheusapi.Request{})
//  assertResponse(t, resp, err)
// }

func ___TestApiCreateKeyPair(t *testing.T) {
	client := getTestClient()

	testKeyName := "test-tf-key-pair"
	// client.Login()
	//body := map[string]interface{}{"foo": "bar", "baz": "boo"}
	payload := &morpheusapi.CreateKeyPairPayload{
		KeyPair: &morpheusapi.KeyPairPayload{
			Name: testKeyName,
			PublicKey: `ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDfz9ADYd2fffYkrX3VjKNI2ZMoa1OVOEgIPG67MOFA9+ASVllqAVrcigotgknFZzFLtdknEBbBwWq1YWIUC6Eh2RvcTYNfzz955iD9xEesDLOY70zI1xWlKqVKKv3e3v5KocLZ9VN5ZPOKA4kXv/kKl2Wlay6iiANBoqQlTLNDbaMFVPFCE7K6MAnoDGIEKmR5T1vi+Hr1Dr+8aDnkg3+cU/XsCJZtHc/2QkbZHK5jVvAIrWrnKLJ+/61bxFrtiqOhHaXtlSTbXRNf+TaCLLPyK1iwZ+5HS8U2k1Rs+DLfPDPXsUUuBRl`,
			PrivateKey: `-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
NhAAAAAwEAAQAAAQEA38/QA2Hdn332JK191YyjSNmTKGtTlThICDxuuzDhQPfgElZZagFa
3IoKLYJJxWcxS7XZJxAWwcFqtWFiFAuhIdkb3E2DX88/eeYg/cRHrAyzmO9MyNcVpSqlSi
r93t7+SqHC2fVTeWTzigOJF7/5CpdlpWsuoogDQaKkJUyzQ22jBVTxQhOyujAJ6AxiBCpk
eU9b4vh69Q6/vGg55IN/nFP17AiWbR3P9kJG2RyuY1bwCK1q5yiyfv+tW8Ra7YqjoR2l7Z
Uk210TX/k2giyz8itYsGfuR0vFNpNUbPgy3zwz17FFLgUZXooOtXbsRphcmosPWapf47fh
FcYVrDTcOwAAA8iEP7kLhD+5CwAAAAdzc2gtcnNhAAABAQDfz9ADYd2fffYkrX3VjKNI2Z
Moa1OVOEgIPG67MOFA9+ASVllqAVrcigotgknFZzFLtdknEBbBwWq1YWIUC6Eh2RvcTYNf
zz955iD9xEesDLOY70zI1xWlKqVKKv3e3v5KocLZ9VN5ZPOKA4kXv/kKl2Wlay6iiANBoq
QlTLNDbaMFVPFCE7K6MAnoDGIEKmR5T1vi+Hr1Dr+8aDnkg3+cU/XsCJZtHc/2QkbZHK5j
VvAIrWrnKLJ+/61bxFrtiqOhHaXtlSTbXRNf+TaCLLPyK1iwZ+5HS8U2k1Rs+DLfPDPXsU
UuBRleig61duxGmFyaiw9Zql/jt+EVxhWsNNw7AAAAAwEAAQAAAQAoCpjvkfnBiBqac0OZ
CiFIbkyqpZD9mGUivBUffl4+blpzTWmP0pA79qJdg/rIy26BWhZwq6s2nPEHZFXUukPot1
wJrQB9CqoTl/19CTm9aURUbzOwlvJza07JFyn2TrT2Czy+G+sEQ/BiV8GWMy1OHMn9r1BX
mbfjbUKqva8wt73p6UJYSTwDZ8ESgyB+4krHFFti3TK1vhsELw/iq8M8SZkA1Fo4+hr9L8
vqJed5y1x124f58cVVp+D4MmCZhjO81PzMgZ8iSHoq1OPnSOZ1EPyLYsJF0eyDhemKlelJ
WorVuUKv0wX8PEqBVJVIDShQenwDqFgr02f8IalAEeFpAAAAgQCIPQsJj54XBP7BbE6fw9
HbT0CwP+G0atPsvHq70QehfuppJ3N1Aa9fFwk0ga6I2PpI0Gzba6XGuzPo9XauxlyEwRyP
LyeeCArGOj9GT1d5IijVdc+pwZpfELQXnswERXYl2jSfpfsy4x/74n2kgtLtPfNY5WdZKV
HsgNRgbhF4PgAAAIEA/vC+5st3iVdpWlxDldezYngFG+6qDJx99UIv/Ebk2KAk6UWuuxrr
krad2zTBL0s6n3QgDp7WH2F8HsvOPwka5UCGls8eGrXNMxmLfJz1sXqh8S6KNElJOugixG
/b/ydHaptJYvlMwdJClIyDYW19IX77/cPU19mQP/kvX3qdBS0AAACBAOC98j0ry45aSbMD
A4euYUTUcNHdMY3rNGVhkVerS5lWg24mVRLyNUv1SAo4p+EAxiGy1fB1Fk6+pFDLDr3mg9
jGA3iskkCUh4ECC1PXRHb+eyfJ2FznDvTSvhesmXb15vB8tDSJ9xMHN/seNQ1KXrX5SMwQ
UDJh5ExinflWk5gHAAAAD2pkaWNrc29uQGpkbWFjNAECAw==
-----END OPENSSH PRIVATE KEY-----`,
		},
	}
	_ = payload

	body := map[string]interface{}{
		"keyPair": map[string]interface{}{
			"name": testKeyName,

			"publicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDfz9ADYd2fffYkrX3VjKNI2ZMoa1OVOEgIPG67MOFA9+ASVllqAVrcigotgknFZzFLtdknEBbBwWq1YWIUC6Eh2RvcTYNfzz955iD9xEesDLOY70zI1xWlKqVKKv3e3v5KocLZ9VN5ZPOKA4kXv/kKl2Wlay6iiANBoqQlTLNDbaMFVPFCE7K6MAnoDGIEKmR5T1vi+Hr1Dr+8aDnkg3+cU/XsCJZtHc/2QkbZHK5jVvAIrWrnKLJ+/61bxFrtiqOhHaXtlSTbXRNf+TaCLLPyK1iwZ+5HS8U2k1Rs+DLfPDPXsUUuBRleig61duxGmFyaiw9Zql/jt+EVxhWsNNw7 tftest_key\n",
			"privateKey": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEA38/QA2Hdn332JK191YyjSNmTKGtTlThICDxuuzDhQPfgElZZagFa\n3IoKLYJJxWcxS7XZJxAWwcFqtWFiFAuhIdkb3E2DX88/eeYg/cRHrAyzmO9MyNcVpSqlSi\nr93t7+SqHC2fVTeWTzigOJF7/5CpdlpWsuoogDQaKkJUyzQ22jBVTxQhOyujAJ6AxiBCpk\neU9b4vh69Q6/vGg55IN/nFP17AiWbR3P9kJG2RyuY1bwCK1q5yiyfv+tW8Ra7YqjoR2l7Z\nUk210TX/k2giyz8itYsGfuR0vFNpNUbPgy3zwz17FFLgUZXooOtXbsRphcmosPWapf47fh\nFcYVrDTcOwAAA8iEP7kLhD+5CwAAAAdzc2gtcnNhAAABAQDfz9ADYd2fffYkrX3VjKNI2Z\nMoa1OVOEgIPG67MOFA9+ASVllqAVrcigotgknFZzFLtdknEBbBwWq1YWIUC6Eh2RvcTYNf\nzz955iD9xEesDLOY70zI1xWlKqVKKv3e3v5KocLZ9VN5ZPOKA4kXv/kKl2Wlay6iiANBoq\nQlTLNDbaMFVPFCE7K6MAnoDGIEKmR5T1vi+Hr1Dr+8aDnkg3+cU/XsCJZtHc/2QkbZHK5j\nVvAIrWrnKLJ+/61bxFrtiqOhHaXtlSTbXRNf+TaCLLPyK1iwZ+5HS8U2k1Rs+DLfPDPXsU\nUuBRleig61duxGmFyaiw9Zql/jt+EVxhWsNNw7AAAAAwEAAQAAAQAoCpjvkfnBiBqac0OZ\nCiFIbkyqpZD9mGUivBUffl4+blpzTWmP0pA79qJdg/rIy26BWhZwq6s2nPEHZFXUukPot1\nwJrQB9CqoTl/19CTm9aURUbzOwlvJza07JFyn2TrT2Czy+G+sEQ/BiV8GWMy1OHMn9r1BX\nmbfjbUKqva8wt73p6UJYSTwDZ8ESgyB+4krHFFti3TK1vhsELw/iq8M8SZkA1Fo4+hr9L8\nvqJed5y1x124f58cVVp+D4MmCZhjO81PzMgZ8iSHoq1OPnSOZ1EPyLYsJF0eyDhemKlelJ\nWorVuUKv0wX8PEqBVJVIDShQenwDqFgr02f8IalAEeFpAAAAgQCIPQsJj54XBP7BbE6fw9\nHbT0CwP+G0atPsvHq70QehfuppJ3N1Aa9fFwk0ga6I2PpI0Gzba6XGuzPo9XauxlyEwRyP\nLyeeCArGOj9GT1d5IijVdc+pwZpfELQXnswERXYl2jSfpfsy4x/74n2kgtLtPfNY5WdZKV\nHsgNRgbhF4PgAAAIEA/vC+5st3iVdpWlxDldezYngFG+6qDJx99UIv/Ebk2KAk6UWuuxrr\nkrad2zTBL0s6n3QgDp7WH2F8HsvOPwka5UCGls8eGrXNMxmLfJz1sXqh8S6KNElJOugixG\n/b/ydHaptJYvlMwdJClIyDYW19IX77/cPU19mQP/kvX3qdBS0AAACBAOC98j0ry45aSbMD\nA4euYUTUcNHdMY3rNGVhkVerS5lWg24mVRLyNUv1SAo4p+EAxiGy1fB1Fk6+pFDLDr3mg9\njGA3iskkCUh4ECC1PXRHb+eyfJ2FznDvTSvhesmXb15vB8tDSJ9xMHN/seNQ1KXrX5SMwQ\nUDJh5ExinflWk5gHAAAAD2pkaWNrc29uQGpkbWFjNAECAw==\n-----END OPENSSH PRIVATE KEY-----\n",
		},
	}

	// resp, err := client.Execute(&morpheusapi.Request{
	// 	Method: "POST",
	// 	Path: "/api/key-pairs",
	// 	Body: body,
	// })

	resp, err := client.CreateKeyPair(&morpheusapi.Request{
		Body: body,
	})
	assertResponse(t, resp, err)

}

func __TestDeleteKeyPair(t *testing.T) {
	client := getTestClient()
	
	testKeyName := "test-tf-key-pair"
	// fetch the one we created by name
	resp, err := client.ListInstances(&morpheusapi.Request{
		QueryParams:map[string]string{
			"name": testKeyName,
      	},
	})
	assertResponse(t, resp, err)
	// parse JSON and fetch the first one by ID
	var listKeyPairsResult morpheusapi.ListKeyPairsResult
	err = json.Unmarshal(resp.Body, &listKeyPairsResult)
	keyPairsCount := listKeyPairsResult.Meta.Total
	fmt.Println("# Instances: ", keyPairsCount)

	if keyPairsCount != 0 {
		myKeyPair := (*listKeyPairsResult.KeyPairs)[0]	
		if myKeyPair.Name != testKeyName {
			t.Errorf("Got the wrong KeyPair. Name is %v instead of %v", myKeyPair.Name, testKeyName)
		}
		// fmt.Println("resp.Result: ", resp.Result)
		resp, err = client.DeleteKeyPair(myKeyPair.ID, &morpheusapi.Request{})
		assertResponse(t, resp, err)
	} else {
		fmt.Println(fmt.Sprintf("Could not find instance by name %v", testKeyName))
	}
}
